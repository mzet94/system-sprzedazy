<?php
/**
 * Spectacle repository.
 */
namespace AppBundle\Repository;

use AppBundle\Entity\Spectacle;
use Doctrine\ORM\EntityRepository;
use Pagerfanta\Adapter\DoctrineORMAdapter;
use Pagerfanta\Pagerfanta;

/**
 * SpectacleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpectacleRepository extends EntityRepository
{
    /**
     * Save entity.
     *
     * @param Spectacle $spectacle Spectacle entity
     */
    public function save(Spectacle $spectacle)
    {
        $this->_em->persist($spectacle);
        $this->_em->flush();
    }

    /**
     * Delete entity.
     *
     * @param Spectacle $spectacle Spectacle entity
     */
    public function delete(Spectacle $spectacle)
    {
        $this->_em->remove($spectacle);
        $this->_em->flush();
    }

    /**
     * Gets all records paginated.
     *
     * @param int $page Page number
     *
     * @return \Pagerfanta\Pagerfanta Result
     */
    public function findAllPaginated($page = 1)
    {
        $paginator = new Pagerfanta(new DoctrineORMAdapter($this->queryAll(), false));
        $paginator->setMaxPerPage(Spectacle::NUM_ITEMS);
        $paginator->setCurrentPage($page);

        return $paginator;
    }
    /**
     * Gets spectacles by play.
     *
     * @param integer $play Play
     * @param integer $page Page number
     *
     * @return \Doctrine\ORM\Query
     */
    public function findByPlayPaginated($play, $page = 1)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->select('s')
            ->where('s.play = :play')
            ->setParameter(':play', $play)
            ->orderBy('s.date', 'ASC');
        $paginator = new Pagerfanta(new DoctrineORMAdapter($qb, false));
        $paginator->setMaxPerPage(Spectacle::NUM_ITEMS);
        $paginator->setCurrentPage($page);

        return $paginator;
    }
    /**
     * Gets spectacles by director.
     *
     * @param integer $director Director
     * @param integer $page     Page number
     *
     * @return \Doctrine\ORM\Query
     */
    public function findByDirectorPaginated($director, $page = 1)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->select('s')
            ->leftJoin('AppBundle:Play', 'p', 'WITH', 'p.id=s.play')
            ->leftJoin('AppBundle:Director', 'd', 'WITH', 'd.id=p.director')
            ->where('s.play = :director AND p.director=:director')
            ->setParameter(':director', $director)
            ->orderBy('s.date', 'ASC');
        $paginator = new Pagerfanta(new DoctrineORMAdapter($qb, false));
        $paginator->setMaxPerPage(Spectacle::NUM_ITEMS);
        $paginator->setCurrentPage($page);

        return $paginator;
    }
    /**
     * Gets spectacles by location.
     *
     * @param string  $location Location
     * @param integer $page     Page number
     *
     * @return \Doctrine\ORM\Query
     */
    public function findByLocationPaginated($location, $page = 1)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->select('s')
            ->where('s.location = :location')
            ->setParameter(':location', $location)
            ->orderBy('s.location', 'ASC');
        $paginator = new Pagerfanta(new DoctrineORMAdapter($qb, false));
        $paginator->setMaxPerPage(Spectacle::NUM_ITEMS);
        $paginator->setCurrentPage($page);

        return $paginator;
    }
    /**
     * Gets price by spectacle.
     *
     * @param integer $id
     *
     * @return \Doctrine\ORM\Query
     */
    public function findPrice($id)
    {
        $qb = $this->createQueryBuilder('price');
        $qb->select('price')
            ->where('price.id = :id')
            ->setParameter(':id', $id);
        $paginator = new Pagerfanta(new DoctrineORMAdapter($qb, false));
        $paginator->setMaxPerPage(Spectacle::NUM_ITEMS);
        $paginator->setCurrentPage($page);

        return $paginator;
    }
    /**
     * Query all entities.
     *
     * @return \Doctrine\ORM\Query
     */
    protected function queryAll()
    {
        return $this->createQueryBuilder('id');
    }
}
